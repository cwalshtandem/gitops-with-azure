name: Build, test, and push artifacts

on:
  push:

jobs:

  run-versioning-script:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: run version script
        run: |
         chmod +x "${GITHUB_WORKSPACE}/versionScript.sh"
         "${GITHUB_WORKSPACE}/versionScript.sh" ${GITHUB_SHA} ${GITHUB_RUN_ID} ${GITHUB_RUN_NUMBER} ${GITHUB_REF}
      - name: Upload semanticversion test file
        uses: actions/upload-artifact@v2
        with:
          name: semanticversion
          path: semanticversion.txt

  dotnet-build-and-test:
    needs: run-versioning-script
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet: [ '5.0.x' ]  
    steps:
      - uses: actions/checkout@v2
      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      - name: Download semanticversion text file
        uses: actions/download-artifact@v2
        with:
          name: semanticversion
      - shell: bash
        run: |
          semanticversionfile=`cat semanticversion.txt`
          adjustedversion="${semanticversionfile#*=}"
          semanticversion="${adjustedversion%VERSION=*}"
          echo "Version from download: $semanticversion"
          echo "SEMANTIC_VERSION=$semanticversion" >> $GITHUB_ENV
      - name: Install dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build
      - name: Test with the dotnet CLI
        run: |
          cd UnitTests
          dotnet test --logger trx --results-directory "TestResults-${{ env.SEMANTIC_VERSION }}"
      - name: Upload dotnet test results
        uses: actions/upload-artifact@v2
        with:
          name: dotnet-results-${{ env.SEMANTIC_VERSION }}
          path: UnitTests/TestResults-${{ env.SEMANTIC_VERSION }}
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}
        
  push-to-acr:
    needs: dotnet-build-and-test
    runs-on: ubuntu-latest
    steps:
      # checkout the repo
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@main

      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Build and push image'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - run: |
          docker build . -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/gitops-with-azure:${{ github.sha }}
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/gitops-with-azure:${{ github.sha }}
  nuget-push:
    needs: dotnet-build-and-test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set VERSION variable from workflow
        run: echo "VERSION=${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
      - name: Build
        run: dotnet build --configuration Debug /p:Version=${VERSION}
      - name: Test
        run: dotnet test --configuration Debug /p:Version=${VERSION} --no-build
      - name: Pack
        run: dotnet pack --configuration Debug /p:Version=${VERSION} --no-build --output .
      - name: Push
        run: dotnet nuget push /home/runner/work/gitops-with-azure/gitops-with-azure/gitops-with-azure.${VERSION}.0.0.nupkg --source "https://nuget.pkg.github.com/cwalshtandem/index.json" --api-key ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
